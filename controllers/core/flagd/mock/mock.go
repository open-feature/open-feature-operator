// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/core/flagd/controller.go

// Package commonmock is a generated GoMock package.
package commonmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/open-feature/open-feature-operator/apis/core/v1beta1"
)

// MockIFlagdResource is a mock of IFlagdResource interface.
type MockIFlagdResource struct {
	ctrl     *gomock.Controller
	recorder *MockIFlagdResourceMockRecorder
}

// MockIFlagdResourceMockRecorder is the mock recorder for MockIFlagdResource.
type MockIFlagdResourceMockRecorder struct {
	mock *MockIFlagdResource
}

// NewMockIFlagdResource creates a new mock instance.
func NewMockIFlagdResource(ctrl *gomock.Controller) *MockIFlagdResource {
	mock := &MockIFlagdResource{ctrl: ctrl}
	mock.recorder = &MockIFlagdResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFlagdResource) EXPECT() *MockIFlagdResourceMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockIFlagdResource) Reconcile(ctx context.Context, flagd *v1beta1.Flagd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx, flagd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockIFlagdResourceMockRecorder) Reconcile(ctx, flagd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockIFlagdResource)(nil).Reconcile), ctx, flagd)
}
