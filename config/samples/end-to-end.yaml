# A basic flag custom resource

apiVersion: core.openfeature.dev/v1alpha1
kind: FeatureFlagConfiguration
metadata:
  name: end-to-end
spec:
  syncProvider:
    name: kubernetes
  featureFlagSpec: |
    {
      "flags": {
        "new-welcome-message": {
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "on"
        },
        "hex-color": {
          "variants": {
            "red": "CC0000",
            "green": "00CC00",
            "blue": "0000CC",
            "yellow": "yellow"
          },
          "defaultVariant": "red",
          "state": "ENABLED"
        },
        "fib-algo": {
          "variants": {
            "recursive": "recursive",
            "memo": "memo",
            "loop": "loop",
            "binet": "binet"
          },
          "defaultVariant": "recursive",
          "state": "ENABLED",
          "targeting": {
            "if": [
              {
                "in": ["@faas.com", {
                  "var": ["email"]
                }]
              }, "binet", null
            ]
          }
        }
      }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: open-feature-demo-sa
  #This is required for flagD sync provider integration with Kubernetes
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-feature-demo-sa-role
rules:
- apiGroups: ["core.openfeature.dev"] # "" indicates the core API group
  resources: ["*"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "dave" to read secrets in the "development" namespace.
# You need to already have a ClusterRole named "secret-reader".
kind: ClusterRoleBinding
metadata:
  name: open-feature-demo-sa-role-rb
subjects:
- kind: ServiceAccount
  name: open-feature-demo-sa #
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: open-feature-demo-sa-role
  apiGroup: ""
---
# Deployment of a demo-app using our custom resource

apiVersion: apps/v1
kind: Deployment
metadata:
  name: open-feature-demo-deployment
  labels:
    app: open-feature-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: open-feature-demo
  template:
    metadata:
      labels:
        app: open-feature-demo
      annotations:
        openfeature.dev: "enabled"
        openfeature.dev/featureflagconfiguration: "end-to-end"
    spec:
      serviceAccountName: open-feature-demo-sa
      containers:
        - name: open-feature-demo
          image: ghcr.io/open-feature/open-feature-demo:latest
          args:
            - flagd
          ports:
            - containerPort: 30000

---
# Service exposed using NodePort

apiVersion: v1
kind: Service
metadata:
  name: open-feature-demo-service
spec:
  type: NodePort
  selector:
    app: open-feature-demo
  ports:
    # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 30000
      targetPort: 30000
      nodePort: 30000
