apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: '{{ include "chart.namespace" . }}/open-feature-operator-serving-cert'
    controller-gen.kubebuilder.io/version: v0.10.0
  name: featureflagconfigurations.core.openfeature.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: open-feature-operator-webhook-service
          namespace: '{{ include "chart.namespace" . }}'
          path: /convert
      conversionReviewVersions:
      - v1
  group: core.openfeature.dev
  names:
    kind: FeatureFlagConfiguration
    listKind: FeatureFlagConfigurationList
    plural: featureflagconfigurations
    shortNames:
    - ff
    singular: featureflagconfiguration
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: FeatureFlagConfiguration is the Schema for the featureflagconfigurations
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: FeatureFlagConfigurationSpec defines the desired state of
              FeatureFlagConfiguration
            properties:
              featureFlagSpec:
                description: FeatureFlagSpec is the json representation of the feature
                  flag
                type: string
              flagDSpec:
                description: 'FlagDSpec [DEPRECATED]: superseded by FlagSourceConfiguration'
                nullable: true
                properties:
                  envs:
                    items:
                      description: EnvVar represents an environment variable present
                        in a Container.
                      properties:
                        name:
                          description: Name of the environment variable. Must be a
                            C_IDENTIFIER.
                          type: string
                        value:
                          description: 'Variable references $(VAR_NAME) are expanded
                            using the previously defined environment variables in
                            the container and any service environment variables. If
                            a variable cannot be resolved, the reference in the input
                            string will be unchanged. Double $$ are reduced to a single
                            $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                            "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                            Escaped references will never be expanded, regardless
                            of whether the variable exists or not. Defaults to "".'
                          type: string
                        valueFrom:
                          description: Source for the environment variable's value.
                            Cannot be used if value is not empty.
                          properties:
                            configMapKeyRef:
                              description: Selects a key of a ConfigMap.
                              properties:
                                key:
                                  description: The key to select.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the ConfigMap or its
                                    key must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                            fieldRef:
                              description: 'Selects a field of the pod: supports metadata.name,
                                metadata.namespace, `metadata.labels[''<KEY>'']`,
                                `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                spec.serviceAccountName, status.hostIP, status.podIP,
                                status.podIPs.'
                              properties:
                                apiVersion:
                                  description: Version of the schema the FieldPath
                                    is written in terms of, defaults to "v1".
                                  type: string
                                fieldPath:
                                  description: Path of the field to select in the
                                    specified API version.
                                  type: string
                              required:
                              - fieldPath
                              type: object
                              x-kubernetes-map-type: atomic
                            resourceFieldRef:
                              description: 'Selects a resource of the container: only
                                resources limits and requests (limits.cpu, limits.memory,
                                limits.ephemeral-storage, requests.cpu, requests.memory
                                and requests.ephemeral-storage) are currently supported.'
                              properties:
                                containerName:
                                  description: 'Container name: required for volumes,
                                    optional for env vars'
                                  type: string
                                divisor:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Specifies the output format of the
                                    exposed resources, defaults to "1"
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                resource:
                                  description: 'Required: resource to select'
                                  type: string
                              required:
                              - resource
                              type: object
                              x-kubernetes-map-type: atomic
                            secretKeyRef:
                              description: Selects a key of a secret in the pod's
                                namespace
                              properties:
                                key:
                                  description: The key of the secret to select from.  Must
                                    be a valid secret key.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                  metricsPort:
                    format: int32
                    type: integer
                type: object
              serviceProvider:
                description: 'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
                  Important: Run "make" to regenerate code after modifying this file'
                nullable: true
                properties:
                  credentials:
                    description: "ObjectReference contains enough information to let
                      you inspect or modify the referred object. --- New uses of this
                      type are discouraged because of difficulty describing its usage
                      when embedded in APIs. 1. Ignored fields.  It includes many
                      fields which are not generally honored.  For instance, ResourceVersion
                      and FieldPath are both very rarely valid in actual usage. 2.
                      Invalid usage help.  It is impossible to add specific help for
                      individual usage.  In most embedded usages, there are particular
                      restrictions like, \"must refer only to types A and B\" or \"UID
                      not honored\" or \"name must be restricted\". Those cannot be
                      well described when embedded. 3. Inconsistent validation.  Because
                      the usages are different, the validation rules are different
                      by usage, which makes it hard for users to predict what will
                      happen. 4. The fields are both imprecise and overly precise.
                      \ Kind is not a precise mapping to a URL. This can produce ambiguity
                      during interpretation and require a REST mapping.  In most cases,
                      the dependency is on the group,resource tuple and the version
                      of the actual struct is irrelevant. 5. We cannot easily change
                      it.  Because this type is embedded in many locations, updates
                      to this type will affect numerous schemas.  Don't make new APIs
                      embed an underspecified API type they do not control. \n Instead
                      of using this type, create a locally provided and used type
                      that is well-focused on your reference. For example, ServiceReferences
                      for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                      ."
                    nullable: true
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  name:
                    enum:
                    - flagd
                    type: string
                required:
                - name
                type: object
              syncProvider:
                nullable: true
                properties:
                  httpSyncConfiguration:
                    description: HttpSyncConfiguration defines the desired configuration
                      for a http sync
                    nullable: true
                    properties:
                      bearerToken:
                        type: string
                      target:
                        description: Target is the target url for flagd to poll
                        type: string
                    required:
                    - target
                    type: object
                  name:
                    type: string
                required:
                - name
                type: object
            type: object
          status:
            description: FeatureFlagConfigurationStatus defines the observed state
              of FeatureFlagConfiguration
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: FeatureFlagConfiguration is the Schema for the featureflagconfigurations
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: FeatureFlagConfigurationSpec defines the desired state of
              FeatureFlagConfiguration
            properties:
              featureFlagSpec:
                description: FeatureFlagSpec is the structured representation of the
                  feature flag specification
                properties:
                  $evaluators:
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  flags:
                    additionalProperties:
                      properties:
                        defaultVariant:
                          type: string
                        state:
                          enum:
                          - ENABLED
                          - DISABLED
                          type: string
                        targeting:
                          description: Targeting is the json targeting rule
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        variants:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                      required:
                      - defaultVariant
                      - state
                      - variants
                      type: object
                    type: object
                required:
                - flags
                type: object
              flagDSpec:
                description: 'FlagDSpec [DEPRECATED]: superseded by FlagSourceConfiguration'
                nullable: true
                properties:
                  envs:
                    items:
                      description: EnvVar represents an environment variable present
                        in a Container.
                      properties:
                        name:
                          description: Name of the environment variable. Must be a
                            C_IDENTIFIER.
                          type: string
                        value:
                          description: 'Variable references $(VAR_NAME) are expanded
                            using the previously defined environment variables in
                            the container and any service environment variables. If
                            a variable cannot be resolved, the reference in the input
                            string will be unchanged. Double $$ are reduced to a single
                            $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                            "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                            Escaped references will never be expanded, regardless
                            of whether the variable exists or not. Defaults to "".'
                          type: string
                        valueFrom:
                          description: Source for the environment variable's value.
                            Cannot be used if value is not empty.
                          properties:
                            configMapKeyRef:
                              description: Selects a key of a ConfigMap.
                              properties:
                                key:
                                  description: The key to select.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the ConfigMap or its
                                    key must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                            fieldRef:
                              description: 'Selects a field of the pod: supports metadata.name,
                                metadata.namespace, `metadata.labels[''<KEY>'']`,
                                `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                spec.serviceAccountName, status.hostIP, status.podIP,
                                status.podIPs.'
                              properties:
                                apiVersion:
                                  description: Version of the schema the FieldPath
                                    is written in terms of, defaults to "v1".
                                  type: string
                                fieldPath:
                                  description: Path of the field to select in the
                                    specified API version.
                                  type: string
                              required:
                              - fieldPath
                              type: object
                              x-kubernetes-map-type: atomic
                            resourceFieldRef:
                              description: 'Selects a resource of the container: only
                                resources limits and requests (limits.cpu, limits.memory,
                                limits.ephemeral-storage, requests.cpu, requests.memory
                                and requests.ephemeral-storage) are currently supported.'
                              properties:
                                containerName:
                                  description: 'Container name: required for volumes,
                                    optional for env vars'
                                  type: string
                                divisor:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: Specifies the output format of the
                                    exposed resources, defaults to "1"
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                resource:
                                  description: 'Required: resource to select'
                                  type: string
                              required:
                              - resource
                              type: object
                              x-kubernetes-map-type: atomic
                            secretKeyRef:
                              description: Selects a key of a secret in the pod's
                                namespace
                              properties:
                                key:
                                  description: The key of the secret to select from.  Must
                                    be a valid secret key.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                              x-kubernetes-map-type: atomic
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                type: object
              serviceProvider:
                description: 'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
                  Important: Run "make" to regenerate code after modifying this file'
                nullable: true
                properties:
                  credentials:
                    description: "ObjectReference contains enough information to let
                      you inspect or modify the referred object. --- New uses of this
                      type are discouraged because of difficulty describing its usage
                      when embedded in APIs. 1. Ignored fields.  It includes many
                      fields which are not generally honored.  For instance, ResourceVersion
                      and FieldPath are both very rarely valid in actual usage. 2.
                      Invalid usage help.  It is impossible to add specific help for
                      individual usage.  In most embedded usages, there are particular
                      restrictions like, \"must refer only to types A and B\" or \"UID
                      not honored\" or \"name must be restricted\". Those cannot be
                      well described when embedded. 3. Inconsistent validation.  Because
                      the usages are different, the validation rules are different
                      by usage, which makes it hard for users to predict what will
                      happen. 4. The fields are both imprecise and overly precise.
                      \ Kind is not a precise mapping to a URL. This can produce ambiguity
                      during interpretation and require a REST mapping.  In most cases,
                      the dependency is on the group,resource tuple and the version
                      of the actual struct is irrelevant. 5. We cannot easily change
                      it.  Because this type is embedded in many locations, updates
                      to this type will affect numerous schemas.  Don't make new APIs
                      embed an underspecified API type they do not control. \n Instead
                      of using this type, create a locally provided and used type
                      that is well-focused on your reference. For example, ServiceReferences
                      for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                      ."
                    nullable: true
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead
                          of an entire object, this string should contain a valid
                          JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part
                          of an object. TODO: this design is not final and this field
                          is subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  name:
                    enum:
                    - flagd
                    type: string
                required:
                - name
                type: object
              syncProvider:
                nullable: true
                properties:
                  httpSyncConfiguration:
                    description: HttpSyncConfiguration defines the desired configuration
                      for a http sync
                    nullable: true
                    properties:
                      bearerToken:
                        type: string
                      target:
                        description: Target is the target url for flagd to poll
                        type: string
                    required:
                    - target
                    type: object
                  name:
                    type: string
                required:
                - name
                type: object
            type: object
          status:
            description: FeatureFlagConfigurationStatus defines the observed state
              of FeatureFlagConfiguration
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: '{{ include "chart.namespace" . }}/open-feature-operator-serving-cert'
    controller-gen.kubebuilder.io/version: v0.10.0
  name: flagsourceconfigurations.core.openfeature.dev
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: open-feature-operator-webhook-service
          namespace: '{{ include "chart.namespace" . }}'
          path: /convert
      conversionReviewVersions:
      - v1
  group: core.openfeature.dev
  names:
    kind: FlagSourceConfiguration
    listKind: FlagSourceConfigurationList
    plural: flagsourceconfigurations
    shortNames:
    - fsc
    singular: flagsourceconfiguration
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: FlagSourceConfiguration is the Schema for the FlagSourceConfigurations
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: FlagSourceConfigurationSpec defines the desired state of
              FlagSourceConfiguration
            properties:
              defaultSyncProvider:
                description: DefaultSyncProvider defines the default sync provider
                type: string
              evaluator:
                description: Evaluator sets an evaluator, defaults to 'json'
                type: string
              image:
                description: Image allows for the sidecar image to be overridden,
                  defaults to 'ghcr.io/open-feature/flagd'
                type: string
              metricsPort:
                description: MetricsPort defines the port to serve metrics on, defaults
                  to 8014
                format: int32
                type: integer
              port:
                description: Port defines the port to listen on, defaults to 8013
                format: int32
                type: integer
              socketPath:
                description: SocketPath defines the unix socket path to listen on
                type: string
              syncProviderArgs:
                description: SyncProviderArgs are string arguments passed to all sync
                  providers, defined as key values separated by =
                items:
                  type: string
                type: array
              tag:
                description: Tag to be appended to the sidecar image, defaults to
                  'main'
                type: string
            type: object
          status:
            description: FlagSourceConfigurationStatus defines the observed state
              of FlagSourceConfiguration
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: FlagSourceConfiguration is the Schema for the FlagSourceConfigurations
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: FlagSourceConfigurationSpec defines the desired state of
              FlagSourceConfiguration
            properties:
              defaultSyncProvider:
                description: DefaultSyncProvider defines the default sync provider
                type: string
              evaluator:
                description: Evaluator sets an evaluator, defaults to 'json'
                type: string
              image:
                description: Image allows for the sidecar image to be overridden,
                  defaults to 'ghcr.io/open-feature/flagd'
                type: string
              metricsPort:
                description: MetricsPort defines the port to serve metrics on, defaults
                  to 8013
                format: int32
                type: integer
              port:
                description: Port defines the port to listen on, defaults to 8014
                format: int32
                type: integer
              socketPath:
                description: SocketPath defines the unix socket path to listen on
                type: string
              syncProviderArgs:
                description: SyncProviderArgs are string arguments passed to all sync
                  providers, defined as key values separated by =
                items:
                  type: string
                type: array
              tag:
                description: Tag to be appended to the sidecar image, defaults to
                  'main'
                type: string
            type: object
          status:
            description: FlagSourceConfigurationStatus defines the observed state
              of FlagSourceConfiguration
            type: object
        type: object
    served: true
    storage: false
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: open-feature-operator-leader-election-role
  namespace: '{{ include "chart.namespace" . }}'
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-feature-operator-flagd-kubernetes-sync
rules:
- apiGroups:
  - core.openfeature.dev
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: open-feature-operator-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - core.openfeature.dev
  resources:
  - featureflagconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - core.openfeature.dev
  resources:
  - featureflagconfigurations/finalizers
  verbs:
  - update
- apiGroups:
  - core.openfeature.dev
  resources:
  - featureflagconfigurations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - core.openfeature.dev
  resources:
  - flagsourceconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - core.openfeature.dev
  resources:
  - flagsourceconfigurations/finalizers
  verbs:
  - update
- apiGroups:
  - core.openfeature.dev
  resources:
  - flagsourceconfigurations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-feature-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: open-feature-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: open-feature-operator-leader-election-rolebinding
  namespace: '{{ include "chart.namespace" . }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: open-feature-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: open-feature-operator-flagd-kubernetes-sync
roleRef:
  apiGroup: ""
  kind: ClusterRole
  name: open-feature-operator-flagd-kubernetes-sync
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: open-feature-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-feature-operator-manager-role
subjects:
- kind: ServiceAccount
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: open-feature-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: open-feature-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: "{{ .Values.managerConfig.controllerManagerConfigYaml.health.healthProbeBindAddress }}"
    metrics:
      bindAddress: "{{ .Values.managerConfig.controllerManagerConfigYaml.metrics.bindAddress }}"
    webhook:
      port: 0{{ .Values.managerConfig.controllerManagerConfigYaml.webhook.port }}
kind: ConfigMap
metadata:
  name: open-feature-operator-manager-config
  namespace: '{{ include "chart.namespace" . }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: open-feature-operator-controller-manager-metrics-service
  namespace: '{{ include "chart.namespace" . }}'
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cert-manager.io/inject-ca-from: open-feature-operator-system/webhook-cert
  name: open-feature-operator-webhook-service
  namespace: '{{ include "chart.namespace" . }}'
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
spec:
  replicas: 0{{ .Values.controllerManager.replicas }}
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --sidecar-cpu-limit=0.5
        - --sidecar-ram-limit=64M
        command:
        - /manager
        env:
        - name: SIDECAR_METRICS_PORT
          value: '{{ .Values.sidecarConfiguration.metricsPort }}'
        - name: SIDECAR_PORT
          value: '{{ .Values.sidecarConfiguration.port }}'
        - name: SIDECAR_SOCKET_PATH
          value: '{{ .Values.sidecarConfiguration.socketPath }}'
        - name: SIDECAR_IMAGE
          value: '{{ .Values.sidecarConfiguration.image.repository }}'
        - name: SIDECAR_TAG
          value: '{{ .Values.sidecarConfiguration.image.tag }}'
        - name: SIDECAR_PROVIDER_ARGS
          value: '{{ .Values.sidecarConfiguration.providerArgs }}'
        - name: SIDECAR_ENV_VAR_PREFIX
          value: '{{ .Values.sidecarConfiguration.envVarPrefix }}'
        - name: SIDECAR_SYNC_PROVIDER
          value: '{{ .Values.sidecarConfiguration.defaultSyncProvider }}'
        image: '{{ .Values.controllerManager.manager.image.repository }}:{{ .Values.controllerManager.manager.image.tag
          }}'
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: '{{ .Values.controllerManager.manager.resources.limits.cpu }}'
            memory: '{{ .Values.controllerManager.manager.resources.limits.memory
              }}'
          requests:
            cpu: '{{ .Values.controllerManager.manager.resources.requests.cpu }}'
            memory: '{{ .Values.controllerManager.manager.resources.requests.memory
              }}'
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: '{{ .Values.controllerManager.kubeRbacProxy.image.repository }}:{{
          .Values.controllerManager.kubeRbacProxy.image.tag }}'
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: '{{ .Values.controllerManager.kubeRbacProxy.resources.limits.cpu
              }}'
            memory: '{{ .Values.controllerManager.kubeRbacProxy.resources.limits.memory
              }}'
          requests:
            cpu: '{{ .Values.controllerManager.kubeRbacProxy.resources.requests.cpu
              }}'
            memory: '{{ .Values.controllerManager.kubeRbacProxy.resources.requests.memory
              }}'
      securityContext:
        runAsNonRoot: true
      serviceAccountName: open-feature-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: open-feature-operator-serving-cert
  namespace: '{{ include "chart.namespace" . }}'
spec:
  dnsNames:
  - open-feature-operator-webhook-service.{{ include "chart.namespace" . }}.svc
  - open-feature-operator-webhook-service.{{ include "chart.namespace" . }}.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: open-feature-operator-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: open-feature-operator-selfsigned-issuer
  namespace: '{{ include "chart.namespace" . }}'
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: '{{ include "chart.namespace" . }}/open-feature-operator-serving-cert'
  name: open-feature-operator-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: open-feature-operator-webhook-service
      namespace: '{{ include "chart.namespace" . }}'
      path: /mutate-v1-pod
  failurePolicy: Ignore
  name: mutate.openfeature.dev
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods
  sideEffects: NoneOnDryRun
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: '{{ include "chart.namespace" . }}/open-feature-operator-serving-cert'
  name: open-feature-operator-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: open-feature-operator-webhook-service
      namespace: '{{ include "chart.namespace" . }}'
      path: /validate-v1alpha1-featureflagconfiguration
  failurePolicy: Fail
  name: validate.featureflagconfiguration.openfeature.dev
  rules:
  - apiGroups:
    - core.openfeature.dev
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - featureflagconfigurations
  sideEffects: None
