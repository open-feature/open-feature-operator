apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: open-feature-operator-controller-manager
  namespace: '{{ include "chart.namespace" . }}'
spec:
  replicas: 0{{ .Values.controllerManager.replicas }}
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --sidecar-cpu-limit=0.5
        - --sidecar-ram-limit=64M
        command:
        - /manager
        env:
        - name: SIDECAR_METRICS_PORT
          value: '{{ .Values.sidecarConfiguration.metricsPort }}'
        - name: SIDECAR_PORT
          value: '{{ .Values.sidecarConfiguration.port }}'
        - name: SIDECAR_SOCKET_PATH
          value: '{{ .Values.sidecarConfiguration.socketPath }}'
        - name: SIDECAR_IMAGE
          value: '{{ .Values.sidecarConfiguration.image.repository }}'
        - name: SIDECAR_TAG
          value: '{{ .Values.sidecarConfiguration.image.tag }}'
        - name: SIDECAR_PROVIDER_ARGS
          value: '{{ .Values.sidecarConfiguration.providerArgs }}'
        - name: SIDECAR_ENV_VAR_PREFIX
          value: '{{ .Values.sidecarConfiguration.envVarPrefix }}'
        - name: SIDECAR_SYNC_PROVIDER
          value: '{{ .Values.sidecarConfiguration.defaultSyncProvider }}'
        - name: SIDECAR_LOG_FORMAT
          value: '{{ .Values.sidecarConfiguration.logFormat }}'
        image: '{{ .Values.controllerManager.manager.image.repository }}:{{ .Values.controllerManager.manager.image.tag
          }}'
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: '{{ .Values.controllerManager.manager.resources.limits.cpu }}'
            memory: '{{ .Values.controllerManager.manager.resources.limits.memory
              }}'
          requests:
            cpu: '{{ .Values.controllerManager.manager.resources.requests.cpu }}'
            memory: '{{ .Values.controllerManager.manager.resources.requests.memory
              }}'
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: '{{ .Values.controllerManager.kubeRbacProxy.image.repository }}:{{
          .Values.controllerManager.kubeRbacProxy.image.tag }}'
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: '{{ .Values.controllerManager.kubeRbacProxy.resources.limits.cpu
              }}'
            memory: '{{ .Values.controllerManager.kubeRbacProxy.resources.limits.memory
              }}'
          requests:
            cpu: '{{ .Values.controllerManager.kubeRbacProxy.resources.requests.cpu
              }}'
            memory: '{{ .Values.controllerManager.kubeRbacProxy.resources.requests.memory
              }}'
      securityContext:
        runAsNonRoot: true
      serviceAccountName: open-feature-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
